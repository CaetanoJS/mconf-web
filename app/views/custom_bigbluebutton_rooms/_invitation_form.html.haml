#webconference-invitation

  .modal-header
    = modal_close_button
    %h3
      = t('.title')
      = icon_info(t('.meeting_in', room: join_webconf_url(room)) + "  ")

  = simple_form_for :invite, :url => send_invitation_bigbluebutton_room_path(room), :html => { :class => 'single-column' } do |f|

    .modal-body
      = f.input :users, :as => :string, :label => t('activerecord.attributes.invite.users')

      #invite-dates-wrapper

        -# TODO: #1262 it would be good to have a custom simple_form input for dates
        .invitation-date
          %label.label-control#invite_starts_on_label
            = form_required_label
            = t('activerecord.attributes.invite.starts_on')
          .form-group
            #invite_starts_on.input-group
              %input.form-control{ :'data-format' => t('_other.datetimepicker.format'), :type => "text", :name => 'invite[starts_on]' }
              .input-group-addon= icon_date
            #invite_starts_on_time
              = f.input :starts_on_time, :label => false, :as => :time, :minute_step => 5, :prompt => { :hour => "", :minute => "" }

        .invitation-date
          %label.label-control
            = form_required_label
            = t('activerecord.attributes.invite.ends_on')
          .form-group
            #invite_ends_on.input-group
              %input.form-control{ :'data-format' => t('_other.datetimepicker.format'), :type => "text", :name => 'invite[ends_on]' }
              .input-group-addon= icon_date
            #invite_ends_on_time
              = f.input :ends_on_time, :label => false, :as => :time, :minute_step => 5, :prompt => { :hour => "", :minute => "" }

        #invite_timezone
          - if Time.zone.now.dst?
            = icon_info(t(".offset_daylight_savings", offset: user_timezone_offset))
          - else
            = icon_info(t(".offset", offset: user_timezone_offset))
          = t(".timezone", :timezone => user_timezone)

        #invite_duration
          %span= t(".duration") + ":"
          %span.duration= ""

      = f.input :title, :as => :string, :label => t('activerecord.attributes.invite.title')
      = f.input :message, :as => :text, :label => t('activerecord.attributes.invite.message'), :required => false

    .modal-footer
      = f.button :wrapped, t('_other.send'), :disabled => true, :class => "btn btn-primary", :cancel_modal => true
